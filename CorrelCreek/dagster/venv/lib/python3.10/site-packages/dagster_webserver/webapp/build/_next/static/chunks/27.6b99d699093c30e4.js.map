{"version":3,"file":"static/chunks/27.6b99d699093c30e4.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/instance/RepoFilterButton.tsx","webpack://_N_E/../ui-core/src/runs/useHourWindow.tsx","webpack://_N_E/../ui-core/src/instance/NextTick.tsx","webpack://_N_E/../ui-core/src/runs/useRunsForTimeline.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTimelineRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/instigation/Unloadable.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/../ui-core/src/runs/RunListTabs.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {QueryResult} from '@apollo/client';\nimport {Box, Tabs} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Activity\" to=\"/overview/activity\" />\n        <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />\n        <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  CursorPaginationControls,\n  NonIdealState,\n  PageHeader,\n  Heading,\n  Page,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewTabs} from '../overview/OverviewTabs';\nimport {DaemonNotRunningAlertBody} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {Loading} from '../ui/Loading';\n\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {BackfillTable, BACKFILL_TABLE_FRAGMENT} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n  InstanceHealthForBackfillsQuery,\n  InstanceHealthForBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\n\nconst PAGE_SIZE = 10;\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const queryData = useQuery<\n    InstanceHealthForBackfillsQuery,\n    InstanceHealthForBackfillsQueryVariables\n  >(INSTANCE_HEALTH_FOR_BACKFILLS_QUERY);\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {},\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  return (\n    <Page>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"backfills\" refreshState={refreshState} />}\n      />\n      <Loading queryResult={queryResult} allowStaleData={true}>\n        {({partitionBackfillsOrError}) => {\n          if (partitionBackfillsOrError.__typename === 'PythonError') {\n            return <PythonErrorInfo error={partitionBackfillsOrError} />;\n          }\n\n          if (!partitionBackfillsOrError.results.length) {\n            return (\n              <Box padding={{vertical: 64}}>\n                <NonIdealState\n                  icon=\"no-results\"\n                  title=\"No backfills found\"\n                  description={<p>This instance does not have any backfill jobs.</p>}\n                />\n              </Box>\n            );\n          }\n\n          const daemonHealths = queryData.data?.instance.daemonHealth.allDaemonStatuses || [];\n          const backfillHealths = daemonHealths\n            .filter((daemon) => daemon.daemonType === 'BACKFILL')\n            .map((daemon) => daemon.required && daemon.healthy);\n          const isBackfillHealthy = backfillHealths.length && backfillHealths.every((x) => x);\n          return (\n            <div>\n              {isBackfillHealthy ? null : (\n                <Box padding={{horizontal: 24, vertical: 16}}>\n                  <DaemonNotRunningAlertBody />\n                </Box>\n              )}\n              <BackfillTable\n                backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n                refetch={queryResult.refetch}\n              />\n              {partitionBackfillsOrError.results.length > 0 ? (\n                <div style={{marginTop: '16px'}}>\n                  <CursorPaginationControls {...paginationProps} />\n                </div>\n              ) : null}\n            </div>\n          );\n        }}\n      </Loading>\n    </Page>\n  );\n};\n\nconst INSTANCE_HEALTH_FOR_BACKFILLS_QUERY = gql`\n  query InstanceHealthForBackfillsQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($cursor: String, $limit: Int) {\n    partitionBackfillsOrError(cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Page,\n  PageHeader,\n  Colors,\n  Box,\n  Tag,\n  Table,\n  Spinner,\n  Dialog,\n  Button,\n  DialogFooter,\n  ButtonLink,\n  NonIdealState,\n  Heading,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport duration from 'dayjs/plugin/duration';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport React from 'react';\nimport {Link, useParams} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {Timestamp} from '../../app/time/Timestamp';\nimport {tokenForAssetKey} from '../../asset-graph/Utils';\nimport {assetDetailsPathForKey} from '../../assets/assetDetailsPathForKey';\nimport {BulkActionStatus, RunStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {RunFilterToken, runsPathWithFilters} from '../../runs/RunsFilterInput';\nimport {testId} from '../../testing/testId';\nimport {VirtualizedItemListForDialog} from '../../ui/VirtualizedItemListForDialog';\nimport {numberFormatter} from '../../ui/formatters';\n\nimport {BACKFILL_ACTIONS_BACKFILL_FRAGMENT, BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillStatusTagForPage} from './BackfillStatusTagForPage';\nimport {\n  BackfillStatusesByAssetQuery,\n  BackfillStatusesByAssetQueryVariables,\n  PartitionBackfillFragment,\n} from './types/BackfillPage.types';\n\ndayjs.extend(duration);\ndayjs.extend(relativeTime);\n\nexport const BackfillPage = () => {\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const queryResult = useQuery<BackfillStatusesByAssetQuery, BackfillStatusesByAssetQueryVariables>(\n    BACKFILL_DETAILS_QUERY,\n    {variables: {backfillId}},\n  );\n\n  const {data} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    function getRunsUrl(status: 'inProgress' | 'complete' | 'failed' | 'targeted') {\n      const filters: RunFilterToken[] = [\n        {\n          token: 'tag',\n          value: `dagster/backfill=${backfillId}`,\n        },\n      ];\n      switch (status) {\n        case 'inProgress':\n          filters.push(\n            {\n              token: 'status',\n              value: RunStatus.STARTED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.QUEUED,\n            },\n            {\n              token: 'status',\n              value: RunStatus.STARTING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.CANCELING,\n            },\n            {\n              token: 'status',\n              value: RunStatus.NOT_STARTED,\n            },\n          );\n          break;\n        case 'complete':\n          filters.push({\n            token: 'status',\n            value: RunStatus.SUCCESS,\n          });\n          break;\n        case 'failed':\n          filters.push({\n            token: 'status',\n            value: RunStatus.FAILURE,\n          });\n          filters.push({\n            token: 'status',\n            value: RunStatus.CANCELED,\n          });\n          break;\n      }\n      return runsPathWithFilters(filters);\n    }\n\n    const linkQuery = () => {\n      if (backfill.assetBackfillData?.rootAssetTargetedRanges?.length === 1) {\n        const ranges = backfill.assetBackfillData?.rootAssetTargetedRanges;\n        if (ranges?.length) {\n          const {start, end} = ranges[0]!;\n          return {default_range: `[${start}...${end}]`};\n        }\n      }\n      return undefined;\n    };\n\n    return (\n      <>\n        <Box\n          padding={24}\n          flex={{\n            direction: 'row',\n            justifyContent: 'space-between',\n            wrap: 'nowrap',\n            alignItems: 'center',\n          }}\n          data-testid={testId('backfill-page-details')}\n        >\n          <Detail\n            label=\"Created\"\n            detail={\n              <Timestamp\n                timestamp={{ms: Number(backfill.timestamp * 1000)}}\n                timeFormat={{showSeconds: true, showTimezone: false}}\n              />\n            }\n          />\n          <Detail\n            label=\"Duration\"\n            detail={\n              <Duration\n                start={backfill.timestamp * 1000}\n                end={backfill.endTimestamp ? backfill.endTimestamp * 1000 : null}\n              />\n            }\n          />\n          <Detail\n            label=\"Partition selection\"\n            detail={\n              <PartitionSelection\n                numPartitions={backfill.numPartitions || 0}\n                rootAssetTargetedPartitions={\n                  backfill.assetBackfillData?.rootAssetTargetedPartitions\n                }\n                rootAssetTargetedRanges={backfill.assetBackfillData?.rootAssetTargetedRanges}\n              />\n            }\n          />\n          <Detail label=\"Status\" detail={<BackfillStatusTagForPage backfill={backfill} />} />\n        </Box>\n        <Table>\n          <thead>\n            <tr>\n              <th style={{width: '50%'}}>Asset name</th>\n              <th>\n                <Link to={getRunsUrl('targeted')}>Partitions targeted</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('inProgress')}>In progress</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('complete')}>Completed</Link>\n              </th>\n              <th>\n                <Link to={getRunsUrl('failed')}>Failed</Link>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {backfill.assetBackfillData?.assetBackfillStatuses.map((asset) => {\n              let targeted;\n              let inProgress;\n              let completed;\n              let failed;\n              if (asset.__typename === 'AssetPartitionsStatusCounts') {\n                targeted = asset.numPartitionsTargeted;\n                inProgress = asset.numPartitionsInProgress;\n                completed = asset.numPartitionsMaterialized;\n                failed = asset.numPartitionsFailed;\n              } else {\n                targeted = 1;\n                failed = asset.failed ? 1 : 0;\n                inProgress = asset.inProgress ? 1 : 0;\n                completed = asset.materialized ? 1 : 0;\n              }\n              return (\n                <tr\n                  key={tokenForAssetKey(asset.assetKey)}\n                  data-testid={testId(`backfill-asset-row-${tokenForAssetKey(asset.assetKey)}`)}\n                >\n                  <td>\n                    <Box flex={{direction: 'row', justifyContent: 'space-between'}}>\n                      <div>\n                        <Link to={assetDetailsPathForKey(asset.assetKey, linkQuery())}>\n                          {asset.assetKey.path.join('/')}\n                        </Link>\n                      </div>\n                      <div>\n                        <StatusBar\n                          targeted={targeted}\n                          inProgress={inProgress}\n                          completed={completed}\n                          failed={failed}\n                        />\n                      </div>\n                    </Box>\n                  </td>\n                  {asset.__typename === 'AssetPartitionsStatusCounts' ? (\n                    <>\n                      <td>{targeted}</td>\n                      <td>{inProgress}</td>\n                      <td>{completed}</td>\n                      <td>{failed}</td>\n                    </>\n                  ) : (\n                    <>\n                      <td>-</td>\n                      <td>\n                        {inProgress ? (\n                          <Tag icon=\"spinner\" intent=\"primary\">\n                            In progress\n                          </Tag>\n                        ) : (\n                          '-'\n                        )}\n                      </td>\n                      <td>{completed ? <Tag intent=\"success\">Completed</Tag> : '-'}</td>\n                      <td>{failed ? <Tag intent=\"danger\">Failed</Tag> : '-'}</td>\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      </>\n    );\n  }\n\n  return (\n    <Page>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.Gray700}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Page>\n  );\n};\n\nconst Detail = ({label, detail}: {label: JSX.Element | string; detail: JSX.Element | string}) => (\n  <Box flex={{direction: 'column', gap: 4}} style={{minWidth: '280px'}}>\n    <Label>{label}</Label>\n    <div>{detail}</div>\n  </Box>\n);\n\nfunction StatusBar({\n  targeted,\n  inProgress,\n  completed,\n  failed,\n}: {\n  targeted: number;\n  inProgress: number;\n  completed: number;\n  failed: number;\n}) {\n  return (\n    <div\n      style={{\n        borderRadius: '8px',\n        backgroundColor: Colors.Gray100,\n        display: 'grid',\n        gridTemplateColumns: `${(100 * completed) / targeted}% ${(100 * failed) / targeted}% ${\n          (100 * inProgress) / targeted\n        }%`,\n        gridTemplateRows: '100%',\n        height: '12px',\n        width: '200px',\n        overflow: 'hidden',\n      }}\n    >\n      <div style={{background: Colors.Green500}} />\n      <div style={{background: Colors.Red500}} />\n      <div style={{background: Colors.Blue200}} />\n    </div>\n  );\n}\n\nconst Label = styled.div`\n  color: ${Colors.Gray700};\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nconst Duration = ({start, end}: {start: number; end?: number | null}) => {\n  const [_, rerender] = React.useReducer((s: number, _: any) => s + 1, 0);\n  React.useEffect(() => {\n    if (end) {\n      return;\n    }\n    // re-render once a minute to update the \"time ago\"\n    const intervalId = setInterval(rerender, 60000);\n    return () => clearInterval(intervalId);\n  }, [start, end]);\n  const duration = end ? end - start : Date.now() - start;\n\n  return <span>{formatDuration(duration)}</span>;\n};\n\nexport const BACKFILL_DETAILS_QUERY = gql`\n  query BackfillStatusesByAsset($backfillId: String!) {\n    partitionBackfillOrError(backfillId: $backfillId) {\n      ...PartitionBackfillFragment\n      ...PythonErrorFragment\n      ... on BackfillNotFoundError {\n        message\n      }\n    }\n  }\n\n  fragment PartitionBackfillFragment on PartitionBackfill {\n    id\n    status\n    timestamp\n    endTimestamp\n    numPartitions\n    ...BackfillActionsBackfillFragment\n\n    error {\n      ...PythonErrorFragment\n    }\n    assetBackfillData {\n      rootAssetTargetedRanges {\n        start\n        end\n      }\n      rootAssetTargetedPartitions\n      assetBackfillStatuses {\n        ... on AssetPartitionsStatusCounts {\n          assetKey {\n            path\n          }\n          numPartitionsTargeted\n          numPartitionsInProgress\n          numPartitionsMaterialized\n          numPartitionsFailed\n        }\n        ... on UnpartitionedAssetStatus {\n          assetKey {\n            path\n          }\n          inProgress\n          materialized\n          failed\n        }\n      }\n    }\n  }\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_ACTIONS_BACKFILL_FRAGMENT}\n`;\n\nconst COLLATOR = new Intl.Collator(navigator.language, {sensitivity: 'base', numeric: true});\n\ntype AssetBackfillData = Extract<\n  PartitionBackfillFragment['assetBackfillData'],\n  {__typename: 'AssetBackfillData'}\n>;\n\nexport const PartitionSelection = ({\n  numPartitions,\n  rootAssetTargetedRanges,\n  rootAssetTargetedPartitions,\n}: {\n  numPartitions: number;\n  rootAssetTargetedRanges?: AssetBackfillData['rootAssetTargetedRanges'];\n  rootAssetTargetedPartitions?: AssetBackfillData['rootAssetTargetedPartitions'];\n}) => {\n  const [isDialogOpen, setIsDialogOpen] = React.useState(false);\n\n  if (rootAssetTargetedPartitions) {\n    if (rootAssetTargetedPartitions.length <= 3) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, wrap: 'wrap'}}>\n          {rootAssetTargetedPartitions.map((p) => (\n            <Tag key={p}>{p}</Tag>\n          ))}\n        </Box>\n      );\n    }\n\n    return (\n      <>\n        <ButtonLink onClick={() => setIsDialogOpen(true)}>\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n        <Dialog\n          isOpen={isDialogOpen}\n          title={`Partition selection (${rootAssetTargetedPartitions.length})`}\n          onClose={() => setIsDialogOpen(false)}\n        >\n          <div style={{height: '340px', overflow: 'hidden'}}>\n            <VirtualizedItemListForDialog\n              items={[...rootAssetTargetedPartitions].sort((a, b) => COLLATOR.compare(a, b))}\n              renderItem={(assetKey) => (\n                <div key={assetKey}>\n                  <TruncatedTextWithFullTextOnHover text={assetKey} />\n                </div>\n              )}\n            />\n          </div>\n          <DialogFooter topBorder>\n            <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n          </DialogFooter>\n        </Dialog>\n      </>\n    );\n  }\n\n  if (rootAssetTargetedRanges) {\n    if (rootAssetTargetedRanges?.length === 1) {\n      const {start, end} = rootAssetTargetedRanges[0]!;\n      return (\n        <div>\n          {start}...{end}\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <ButtonLink onClick={() => setIsDialogOpen(true)}>\n          {numberFormatter.format(numPartitions)} partitions\n        </ButtonLink>\n        <Dialog\n          isOpen={isDialogOpen}\n          title={`Partition selection (${rootAssetTargetedRanges?.length})`}\n          onClose={() => setIsDialogOpen(false)}\n        >\n          <div style={{height: '340px', overflow: 'hidden'}}>\n            <VirtualizedItemListForDialog\n              items={rootAssetTargetedRanges || []}\n              renderItem={({start, end}) => {\n                return <div key={`${start}:${end}`}>{`${start}...${end}`}</div>;\n              }}\n            />\n          </div>\n          <DialogFooter topBorder>\n            <Button onClick={() => setIsDialogOpen(false)}>Close</Button>\n          </DialogFooter>\n        </Dialog>\n      </>\n    );\n  }\n\n  return <div>{numPartitions === 1 ? '1 partition' : `${numPartitions} partitions`}</div>;\n};\n\nconst formatDuration = (duration: number) => {\n  const seconds = Math.floor((duration / 1000) % 60);\n  const minutes = Math.floor((duration / (1000 * 60)) % 60);\n  const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\n  const days = Math.floor(duration / (1000 * 60 * 60 * 24));\n\n  let result = '';\n  if (days > 0) {\n    result += `${days}d `;\n    result += `${hours}h`;\n  } else if (hours > 0) {\n    result += `${hours}h `;\n    result += `${minutes}m`;\n  } else if (minutes > 0) {\n    result += `${minutes}m `;\n    result += `${seconds}s`;\n  }\n  return result.trim();\n};\n","import {useQuery} from '@apollo/client';\nimport {\n  Box,\n  Spinner,\n  Colors,\n  Icon,\n  Tag,\n  useViewport,\n  Select,\n  MenuItem,\n  Caption,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsLiveData} from '../asset-data/AssetLiveDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey, tokenForAssetKey} from '../asset-graph/Utils';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {ASSET_CATALOG_TABLE_QUERY} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {\n  AssetCatalogTableQuery,\n  AssetCatalogTableQueryVariables,\n} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.FC<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.FC<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const query = useQuery<AssetCatalogTableQuery, AssetCatalogTableQueryVariables>(\n    ASSET_CATALOG_TABLE_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(query, FIFTEEN_SECONDS);\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (query.data?.assetsOrError.__typename === 'AssetConnection') {\n      const assets = query.data.assetsOrError.nodes;\n      return groupAssets(assets);\n    }\n    return [];\n  }, [query.data?.assetsOrError]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    const result = query.data?.assetsOrError;\n    if (!query.data && query.loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (result?.__typename === 'PythonError') {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={result} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nfunction VirtualHeaderRow() {\n  return (\n    <Box\n      border=\"top-and-bottom\"\n      style={{\n        display: 'grid',\n        gridTemplateColumns: TEMPLATE_COLUMNS,\n        height: '32px',\n        fontSize: '12px',\n        color: Colors.Gray600,\n        position: 'sticky',\n        top: 0,\n        zIndex: 1,\n        background: Colors.White,\n      }}\n    >\n      <HeaderCell>Group name</HeaderCell>\n      <HeaderCell>Missing</HeaderCell>\n      <HeaderCell>Failed/Overdue</HeaderCell>\n      <HeaderCell>In progress</HeaderCell>\n      <HeaderCell>Materialized</HeaderCell>\n    </Box>\n  );\n}\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsLiveData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    type assetType = (typeof group)['assets'][0];\n    type StatusesType = {asset: assetType; status: ReturnType<typeof buildAssetNodeStatusContent>};\n    const statuses = {\n      successful: [] as StatusesType[],\n      failed: [] as StatusesType[],\n      inprogress: [] as StatusesType[],\n      missing: [] as StatusesType[],\n      loading: false,\n    };\n    if (!Object.keys(liveDataByNode).length) {\n      statuses.loading = true;\n      return statuses;\n    }\n    Object.keys(liveDataByNode).forEach((key) => {\n      const assetLiveData = liveDataByNode[key];\n      const asset = group.assets.find((asset) => tokenForAssetKey(asset.key) === key);\n      if (!asset?.definition) {\n        console.warn('Expected a definition for asset with key', key);\n        return;\n      }\n      const status = buildAssetNodeStatusContent({\n        assetKey: asset.key,\n        definition: asset.definition,\n        liveData: assetLiveData,\n        expanded: true,\n      });\n      switch (status.case) {\n        case StatusCase.LOADING:\n          statuses.loading = true;\n          break;\n        case StatusCase.SOURCE_OBSERVING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.SOURCE_OBSERVED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NEVER_OBSERVED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.SOURCE_NO_STATE:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZING:\n          statuses.inprogress.push({asset, status});\n          break;\n        case StatusCase.LATE_OR_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.NEVER_MATERIALIZED:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_FAILED:\n          statuses.failed.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MISSING:\n          statuses.missing.push({asset, status});\n          break;\n        case StatusCase.PARTITIONS_MATERIALIZED:\n          statuses.successful.push({asset, status});\n          break;\n      }\n    });\n    return statuses;\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.Gray500}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.Green500,\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            0\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    padding-top: 26px 0px;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.Gray900}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.Gray600};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.Gray700}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","import {Box, Button, DialogFooter, DialogHeader, Dialog, Icon} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RepoSelector} from '../nav/RepoSelector';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\n\nexport const RepoFilterButton: React.FC = () => {\n  const {allRepos, visibleRepos, toggleVisible} = React.useContext(WorkspaceContext);\n  const [open, setOpen] = React.useState(false);\n  return (\n    <>\n      <Dialog\n        canOutsideClickClose\n        canEscapeKeyClose\n        isOpen={open}\n        style={{width: 'auto'}}\n        onClose={() => setOpen(false)}\n      >\n        <DialogHeader icon=\"repo\" label=\"Filter code locations\" />\n        <RepoSelector\n          options={allRepos}\n          onBrowse={() => setOpen(false)}\n          onToggle={toggleVisible}\n          selected={visibleRepos}\n        />\n        <DialogFooter>\n          <Box padding={{top: 8}}>\n            <Button intent=\"none\" onClick={() => setOpen(false)}>\n              Done\n            </Button>\n          </Box>\n        </DialogFooter>\n      </Dialog>\n\n      <Button\n        intent=\"none\"\n        icon={<Icon name=\"folder\" />}\n        rightIcon={<Icon name=\"expand_more\" />}\n        onClick={() => setOpen(true)}\n      >\n        {`${visibleRepos.length} of ${allRepos.length}`}\n      </Button>\n    </>\n  );\n};\n","import * as React from 'react';\n\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\n\nconst HOUR_WINDOW_KEY = 'dagster.run-timeline-hour-window';\n\nexport type HourWindow = '1' | '6' | '12' | '24';\n\nexport const useHourWindow = (\n  defaultValue: HourWindow,\n): [HourWindow, (value: HourWindow) => void] => {\n  const validate = React.useCallback(\n    (value: string) => {\n      switch (value) {\n        case '1':\n        case '6':\n        case '12':\n        case '24':\n          return value;\n        default:\n          return defaultValue;\n      }\n    },\n    [defaultValue],\n  );\n\n  const [hourWindow, setHourWindow] = useStateWithStorage(HOUR_WINDOW_KEY, validate);\n  const setHourWindowWithDefault = React.useCallback(\n    (value: HourWindow) => {\n      setHourWindow(value || defaultValue);\n    },\n    [defaultValue, setHourWindow],\n  );\n\n  return React.useMemo(\n    () => [hourWindow, setHourWindowWithDefault],\n    [hourWindow, setHourWindowWithDefault],\n  );\n};\n","import {gql} from '@apollo/client';\n\nexport const SCHEDULE_FUTURE_TICKS_FRAGMENT = gql`\n  fragment ScheduleFutureTicksFragment on Schedule {\n    id\n    executionTimezone\n    scheduleState {\n      id\n      status\n    }\n    futureTicks(cursor: $tickCursor, until: $ticksUntil) {\n      results {\n        timestamp\n      }\n    }\n  }\n`;\n","import {gql, useQuery} from '@apollo/client';\nimport * as React from 'react';\n\nimport {isHiddenAssetGroupJob, __ASSET_JOB_PREFIX} from '../asset-graph/Utils';\nimport {InstigationStatus, RunsFilter, RunStatus} from '../graphql/types';\nimport {SCHEDULE_FUTURE_TICKS_FRAGMENT} from '../instance/NextTick';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\nimport {doneStatuses} from './RunStatuses';\nimport {TimelineJob, TimelineRun} from './RunTimeline';\nimport {RUN_TIME_FRAGMENT} from './RunUtils';\nimport {overlap} from './batchRunsForTimeline';\nimport {RunTimelineQuery, RunTimelineQueryVariables} from './types/useRunsForTimeline.types';\n\nexport const useRunsForTimeline = (range: [number, number], runsFilter: RunsFilter = {}) => {\n  const [start, end] = range;\n\n  const startSec = start / 1000.0;\n  const endSec = end / 1000.0;\n\n  const queryData = useQuery<RunTimelineQuery, RunTimelineQueryVariables>(RUN_TIMELINE_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      inProgressFilter: {\n        ...runsFilter,\n        statuses: [RunStatus.CANCELING, RunStatus.STARTED],\n        createdBefore: endSec,\n      },\n      terminatedFilter: {\n        ...runsFilter,\n        statuses: Array.from(doneStatuses),\n        createdBefore: endSec,\n        updatedAfter: startSec,\n      },\n      tickCursor: startSec,\n      ticksUntil: endSec,\n    },\n  });\n\n  const {data, previousData, loading} = queryData;\n\n  const initialLoading = loading && !data;\n  const {unterminated, terminated, workspaceOrError} = data || previousData || {};\n\n  const runsByJobKey = React.useMemo(() => {\n    const map: {[jobKey: string]: TimelineRun[]} = {};\n    const now = Date.now();\n\n    // fetch all the runs in the given range\n    [\n      ...(unterminated?.__typename === 'Runs' ? unterminated.results : []),\n      ...(terminated?.__typename === 'Runs' ? terminated.results : []),\n    ].forEach((run) => {\n      if (!run.startTime) {\n        return;\n      }\n      if (!run.repositoryOrigin) {\n        return;\n      }\n\n      if (\n        !overlap(\n          {start, end},\n          {\n            start: run.startTime * 1000,\n            end: run.endTime ? run.endTime * 1000 : now,\n          },\n        )\n      ) {\n        return;\n      }\n\n      const runJobKey = makeJobKey(\n        {\n          name: run.repositoryOrigin.repositoryName,\n          location: run.repositoryOrigin.repositoryLocationName,\n        },\n        run.pipelineName,\n      );\n\n      map[runJobKey] = [\n        ...(map[runJobKey] || []),\n        {\n          id: run.id,\n          status: run.status,\n          startTime: run.startTime * 1000,\n          endTime: run.endTime ? run.endTime * 1000 : now,\n        },\n      ];\n    });\n\n    return map;\n  }, [end, unterminated, terminated, start]);\n\n  const jobsWithRuns: TimelineJob[] = React.useMemo(() => {\n    if (!workspaceOrError || workspaceOrError.__typename !== 'Workspace') {\n      return [];\n    }\n\n    const jobs: TimelineJob[] = [];\n    for (const locationEntry of workspaceOrError.locationEntries) {\n      if (\n        locationEntry.__typename !== 'WorkspaceLocationEntry' ||\n        locationEntry.locationOrLoadError?.__typename !== 'RepositoryLocation'\n      ) {\n        continue;\n      }\n\n      const now = Date.now();\n      for (const repository of locationEntry.locationOrLoadError.repositories) {\n        const repoAddress = buildRepoAddress(\n          repository.name,\n          locationEntry.locationOrLoadError.name,\n        );\n\n        for (const pipeline of repository.pipelines) {\n          const schedules = (repository.schedules || []).filter(\n            (schedule) => schedule.pipelineName === pipeline.name,\n          );\n\n          const jobTicks: TimelineRun[] = [];\n          for (const schedule of schedules) {\n            if (schedule.scheduleState.status === InstigationStatus.RUNNING) {\n              schedule.futureTicks.results.forEach(({timestamp}) => {\n                const startTime = timestamp! * 1000;\n                if (startTime > now && overlap({start, end}, {start: startTime, end: startTime})) {\n                  jobTicks.push({\n                    id: `${schedule.pipelineName}-future-run-${timestamp}`,\n                    status: 'SCHEDULED',\n                    startTime,\n                    endTime: startTime + 5 * 1000,\n                  });\n                }\n              });\n            }\n          }\n\n          const isAdHoc = isHiddenAssetGroupJob(pipeline.name);\n          const jobKey = makeJobKey(repoAddress, pipeline.name);\n          const jobName = isAdHoc ? 'Ad hoc materializations' : pipeline.name;\n\n          const jobRuns = runsByJobKey[jobKey] || [];\n          if (!jobTicks.length && !jobRuns.length) {\n            continue;\n          }\n\n          const jobsAndTicksToAdd = [...jobRuns, ...jobTicks];\n          if (isAdHoc) {\n            const adHocJobs = jobs.find(\n              (job) => job.jobType === 'asset' && job.repoAddress === repoAddress,\n            );\n            if (adHocJobs) {\n              adHocJobs.runs.push(...jobsAndTicksToAdd);\n              continue;\n            }\n          }\n\n          jobs.push({\n            key: jobKey,\n            jobName,\n            jobType: isAdHoc ? 'asset' : 'job',\n            repoAddress,\n            path: workspacePipelinePath({\n              repoName: repoAddress.name,\n              repoLocation: repoAddress.location,\n              pipelineName: pipeline.name,\n              isJob: pipeline.isJob,\n            }),\n            runs: [...jobRuns, ...jobTicks],\n          } as TimelineJob);\n        }\n      }\n    }\n\n    const earliest = jobs.reduce(\n      (accum, job) => {\n        const startTimes = job.runs.map((job) => job.startTime);\n        return {...accum, [job.key]: Math.min(...startTimes)};\n      },\n      {} as {[jobKey: string]: number},\n    );\n\n    return jobs.sort((a, b) => earliest[a.key]! - earliest[b.key]!);\n  }, [workspaceOrError, runsByJobKey, start, end]);\n\n  return React.useMemo(\n    () => ({\n      jobs: jobsWithRuns,\n      initialLoading,\n      queryData,\n    }),\n    [initialLoading, jobsWithRuns, queryData],\n  );\n};\n\nexport const makeJobKey = (repoAddress: RepoAddress, jobName: string) =>\n  `${jobName}-${repoAddressAsHumanString(repoAddress)}`;\n\nconst RUN_TIMELINE_QUERY = gql`\n  query RunTimelineQuery(\n    $inProgressFilter: RunsFilter!\n    $terminatedFilter: RunsFilter!\n    $tickCursor: Float\n    $ticksUntil: Float\n  ) {\n    unterminated: runsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    terminated: runsOrError(filter: $terminatedFilter) {\n      ... on Runs {\n        results {\n          id\n          pipelineName\n          repositoryOrigin {\n            id\n            repositoryName\n            repositoryLocationName\n          }\n          ...RunTimeFragment\n        }\n      }\n    }\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          name\n          loadStatus\n          displayMetadata {\n            key\n            value\n          }\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n                schedules {\n                  id\n                  name\n                  pipelineName\n                  scheduleState {\n                    id\n                    status\n                  }\n                  ...ScheduleFutureTicksFragment\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_FUTURE_TICKS_FRAGMENT}\n`;\n","import {Box, TextInput, Button, ButtonGroup, ErrorBoundary} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RunTimeline} from '../runs/RunTimeline';\nimport {useHourWindow, HourWindow} from '../runs/useHourWindow';\nimport {makeJobKey, useRunsForTimeline} from '../runs/useRunsForTimeline';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nconst LOOKAHEAD_HOURS = 1;\nconst ONE_HOUR = 60 * 60 * 1000;\nconst POLL_INTERVAL = 60 * 1000;\n\nconst hourWindowToOffset = (hourWindow: HourWindow) => {\n  switch (hourWindow) {\n    case '1':\n      return ONE_HOUR;\n    case '6':\n      return 6 * ONE_HOUR;\n    case '12':\n      return 12 * ONE_HOUR;\n    case '24':\n      return 24 * ONE_HOUR;\n  }\n};\n\ntype Props = {\n  Header: React.FC<{refreshState: ReturnType<typeof useQueryRefreshAtInterval>}>;\n  TabButton: React.FC<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewTimelineRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Timeline');\n\n  const {allRepos, visibleRepos} = React.useContext(WorkspaceContext);\n\n  const [hourWindow, setHourWindow] = useHourWindow('12');\n  const [now, setNow] = React.useState(() => Date.now());\n  const [offsetMsec, setOffsetMsec] = React.useState(() => 0);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  React.useEffect(() => {\n    setNow(Date.now());\n    const timer = setInterval(() => {\n      setNow(Date.now());\n    }, POLL_INTERVAL);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, [hourWindow]);\n\n  const onPageEarlier = React.useCallback(() => {\n    setOffsetMsec((current) => current - hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageLater = React.useCallback(() => {\n    setOffsetMsec((current) => current + hourWindowToOffset(hourWindow));\n  }, [hourWindow]);\n\n  const onPageNow = React.useCallback(() => {\n    setOffsetMsec(0);\n  }, []);\n\n  const range: [number, number] = React.useMemo(\n    () => [\n      now - Number(hourWindow) * ONE_HOUR + offsetMsec,\n      now + LOOKAHEAD_HOURS * ONE_HOUR + offsetMsec,\n    ],\n    [hourWindow, now, offsetMsec],\n  );\n\n  const {jobs, initialLoading, queryData} = useRunsForTimeline(range);\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n\n  const visibleJobKeys = React.useMemo(() => {\n    const searchLower = searchValue.toLocaleLowerCase().trim();\n    const flat = visibleRepos.flatMap((repo) => {\n      const repoAddress = buildRepoAddress(repo.repository.name, repo.repositoryLocation.name);\n      return repo.repository.pipelines\n        .filter(({name}) => name.toLocaleLowerCase().includes(searchLower))\n        .map((job) => makeJobKey(repoAddress, job.name));\n    });\n    return new Set(flat);\n  }, [visibleRepos, searchValue]);\n\n  const visibleJobs = React.useMemo(\n    () => jobs.filter(({key}) => visibleJobKeys.has(key)),\n    [jobs, visibleJobKeys],\n  );\n\n  return (\n    <>\n      <Header refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}>\n          <TabButton selected=\"timeline\" />\n          {allRepos.length > 1 && <RepoFilterButton />}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '200px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 16, alignItems: 'center'}}>\n          <ButtonGroup<HourWindow>\n            activeItems={new Set([hourWindow])}\n            buttons={[\n              {id: '1', label: '1hr'},\n              {id: '6', label: '6hr'},\n              {id: '12', label: '12hr'},\n              {id: '24', label: '24hr'},\n            ]}\n            onClick={(hrWindow: HourWindow) => setHourWindow(hrWindow)}\n          />\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Button onClick={onPageEarlier}>&larr;</Button>\n            <Button onClick={onPageNow}>Now</Button>\n            <Button onClick={onPageLater}>&rarr;</Button>\n          </Box>\n        </Box>\n      </Box>\n      <ErrorBoundary region=\"timeline\">\n        <RunTimeline loading={initialLoading} range={range} jobs={visibleJobs} />\n      </ErrorBoundary>\n    </>\n  );\n};\n","import {PageHeader, Heading, Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\n\nexport const OverviewActivityRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"activity\" refreshState={refreshState} />}\n      />\n    ),\n    [],\n  );\n\n  const [defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        <Route path=\"/overview/activity/assets\">\n          <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [value, setValue] = React.useState(false);\n\n  React.useEffect(() => {\n    const timer = setTimeout(() => setValue(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return value;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedJobHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.jobCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedJobRow\n                  key={key}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewJobsTable} from './OverviewJobsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/OverviewJobsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"jobs\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by job name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (data?: OverviewJobsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable: React.FC<Props> = ({repos}) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedResourceHeader />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              return type === 'header' ? (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={\n                        row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                      }\n                      placement=\"top\"\n                    >\n                      <Tag>{row.resourceCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              ) : (\n                <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"resources\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (data?: OverviewResourcesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {useMutation} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Checkbox,\n  Colors,\n  Group,\n  Table,\n  Subheading,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {useConfirmation} from '../app/CustomConfirmationProvider';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {InstigationStatus, InstigationType} from '../graphql/types';\nimport {\n  displayScheduleMutationErrors,\n  STOP_SCHEDULE_MUTATION,\n} from '../schedules/ScheduleMutations';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from '../schedules/types/ScheduleMutations.types';\nimport {displaySensorMutationErrors, STOP_SENSOR_MUTATION} from '../sensors/SensorMutations';\nimport {\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from '../sensors/types/SensorMutations.types';\nimport {InstigatorSelectorInformation} from '../workspace/RepositoryInformation';\n\nimport {TickTag} from './InstigationTick';\nimport {InstigatedRunStatus} from './InstigationUtils';\nimport {InstigationStateFragment} from './types/InstigationUtils.types';\n\nexport const UnloadableSensors: React.FC<{\n  sensorStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({sensorStates, showSubheading = true}) => {\n  if (!sensorStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable sensors</Subheading> : null}\n        <UnloadableSensorInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Sensor name</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n          </tr>\n        </thead>\n        <tbody>\n          {sensorStates.map((sensorState) => (\n            <SensorStateRow sensorState={sensorState} key={sensorState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nexport const UnloadableSchedules: React.FC<{\n  scheduleStates: InstigationStateFragment[];\n  showSubheading?: boolean;\n}> = ({scheduleStates, showSubheading = true}) => {\n  if (!scheduleStates.length) {\n    return null;\n  }\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 20}}>\n        {showSubheading ? <Subheading>Unloadable schedules</Subheading> : null}\n        <UnloadableScheduleInfo />\n      </Box>\n      <Table>\n        <thead>\n          <tr>\n            <th style={{maxWidth: '60px'}}></th>\n            <th>Schedule name</th>\n            <th style={{width: '150px'}}>Schedule</th>\n            <th style={{width: '100px'}}>Last tick</th>\n            <th>Last run</th>\n            <th>Partition set status</th>\n          </tr>\n        </thead>\n        <tbody>\n          {scheduleStates.map((scheduleState) => (\n            <ScheduleStateRow scheduleState={scheduleState} key={scheduleState.id} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  );\n};\n\nconst UnloadableSensorInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following sensors, but you cannot turn them back on.{' '}\n      </div>\n    }\n    description={\n      <div>\n        The following sensors were previously started but now cannot be loaded. They may be part of\n        a different workspace or from a sensor or code location that no longer exists in code. You\n        can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst UnloadableScheduleInfo = () => (\n  <Alert\n    intent=\"warning\"\n    title={\n      <div>\n        Note: You can turn off any of the following schedules, but you cannot turn them back on.\n      </div>\n    }\n    description={\n      <div>\n        The following schedules were previously started but now cannot be loaded. They may be part\n        of a different workspace or from a schedule or code location that no longer exists in code.\n        You can turn them off, but you cannot turn them back on since they can’t be loaded.\n      </div>\n    }\n  />\n);\n\nconst SensorStateRow = ({sensorState}: {sensorState: InstigationStateFragment}) => {\n  const {id, selectorId, name, status, ticks, hasStopPermission} = sensorState;\n\n  const [stopSensor, {loading: toggleOffInFlight}] = useMutation<\n    StopRunningSensorMutation,\n    StopRunningSensorMutationVariables\n  >(STOP_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const confirm = useConfirmation();\n\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to turn off this sensor?',\n        description:\n          'The definition for this sensor is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSensor({variables: {jobOriginId: id, jobSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !hasStopPermission;\n  const latestTick = ticks.length ? ticks[0] : null;\n\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        disabled={toggleOffInFlight || status === InstigationStatus.STOPPED || lacksPermission}\n        checked={status === InstigationStatus.RUNNING}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          {name}\n        </Group>\n        <InstigatorSelectorInformation instigatorState={sensorState} />\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SENSOR} />\n        ) : (\n          <span style={{color: Colors.Gray300}}>None</span>\n        )}\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>\n          <InstigatedRunStatus instigationState={sensorState} />\n        </div>\n      </td>\n    </tr>\n  );\n};\n\nconst ScheduleStateRow: React.FC<{\n  scheduleState: InstigationStateFragment;\n}> = ({scheduleState}) => {\n  const [stopSchedule, {loading: toggleOffInFlight}] = useMutation<\n    StopScheduleMutation,\n    StopScheduleMutationVariables\n  >(STOP_SCHEDULE_MUTATION, {\n    onCompleted: displayScheduleMutationErrors,\n  });\n  const confirm = useConfirmation();\n  const {id, selectorId, name, ticks, status, typeSpecificData} = scheduleState;\n  const latestTick = ticks.length > 0 ? ticks[0] : null;\n  const cronSchedule =\n    typeSpecificData && typeSpecificData.__typename === 'ScheduleData'\n      ? typeSpecificData.cronSchedule\n      : null;\n  const onChangeSwitch = async () => {\n    if (status === InstigationStatus.RUNNING) {\n      await confirm({\n        title: 'Are you sure you want to stop this schedule?',\n        description:\n          'The definition for this schedule is not available. ' +\n          'If you turn it off, you will not be able to turn it back on from ' +\n          'the currently loaded workspace.',\n      });\n      stopSchedule({variables: {scheduleOriginId: id, scheduleSelectorId: selectorId}});\n    }\n  };\n\n  const lacksPermission = status === InstigationStatus.RUNNING && !scheduleState.hasStopPermission;\n  const checkbox = () => {\n    const element = (\n      <Checkbox\n        format=\"switch\"\n        checked={status === InstigationStatus.RUNNING}\n        disabled={status !== InstigationStatus.RUNNING || toggleOffInFlight || lacksPermission}\n        onChange={onChangeSwitch}\n      />\n    );\n\n    return lacksPermission ? (\n      <Tooltip content={DEFAULT_DISABLED_REASON}>{element}</Tooltip>\n    ) : (\n      element\n    );\n  };\n\n  return (\n    <tr key={name}>\n      <td style={{width: 60}}>{checkbox()}</td>\n      <td>\n        <Group direction=\"row\" spacing={8} alignItems=\"center\">\n          <div>{name}</div>\n        </Group>\n        <InstigatorSelectorInformation instigatorState={scheduleState} />\n      </td>\n      <td style={{maxWidth: 150}}>\n        <div\n          style={{\n            position: 'relative',\n            width: '100%',\n            whiteSpace: 'pre-wrap',\n            display: 'block',\n          }}\n        >\n          {cronSchedule ? (\n            <Tooltip position=\"bottom\" content={cronSchedule}>\n              {humanCronString(cronSchedule)}\n            </Tooltip>\n          ) : (\n            <div>&mdash;</div>\n          )}\n        </div>\n      </td>\n      <td>\n        {latestTick ? (\n          <TickTag tick={latestTick} instigationType={InstigationType.SCHEDULE} />\n        ) : null}\n      </td>\n      <td>\n        <InstigatedRunStatus instigationState={scheduleState} />\n      </td>\n      <td>\n        <div style={{display: 'flex'}}>&mdash;</div>\n      </td>\n    </tr>\n  );\n};\n","import * as React from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\n\nimport {useStaticSetFilter} from './useStaticSetFilter';\n\nexport const useCodeLocationFilter = () => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = React.useContext(WorkspaceContext);\n\n  const allRepoAddresses = React.useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = React.useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  return useStaticSetFilter<RepoAddress>({\n    name: 'Code location',\n    icon: 'folder',\n    initialState: visibleRepoAddresses,\n    allValues: allRepoAddresses.map((repoAddress) => {\n      return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n    }),\n    getKey: (repoAddress) => repoAddressAsHumanString(repoAddress),\n    renderLabel: ({value}) => (\n      <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n    ),\n    getStringValue: (value) => repoAddressAsHumanString(value),\n    onStateChanged: (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    menuWidth: '500px',\n  });\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSchedules} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n  UnloadableSchedulesQuery,\n  UnloadableSchedulesQueryVariables,\n} from './types/OverviewSchedulesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = React.useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = React.useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"schedules\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSchedulesAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSchedulesAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable schedule' : `${count} unloadable schedules`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Schedules were previously started but now cannot be loaded. They may be part of a\n                code locations that no longer exist. You can turn them off, but you cannot turn them\n                back on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable schedule' : 'View unloadable schedules'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableScheduleDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableScheduleDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSchedulesQuery, UnloadableSchedulesQueryVariables>(\n    UNLOADABLE_SCHEDULES_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSchedules\n        scheduleStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSchedulesQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SCHEDULES_QUERY = gql`\n  query UnloadableSchedulesQuery {\n    unloadableInstigationStatesOrError(instigationType: SCHEDULE) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <VirtualizedSensorHeader checkbox={headerCheckbox} />\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.sensorCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n              return (\n                <VirtualizedSensorRow\n                  key={key}\n                  name={row.sensor.name}\n                  sensorState={row.sensor.sensorState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(sensorKey)}\n                  onToggleChecked={onToggleCheckFactory(sensorKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {gql, useQuery} from '@apollo/client';\nimport {\n  Alert,\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {useQueryRefreshAtInterval, FIFTEEN_SECONDS} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\nimport {UnloadableSensors} from '../instigation/Unloadable';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useFilters} from '../ui/Filters';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {OverviewTabs} from './OverviewTabs';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSensorsQuery,\n  OverviewSensorsQueryVariables,\n  UnloadableSensorsQuery,\n  UnloadableSensorsQueryVariables,\n} from './types/OverviewSensorsRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  const {allRepos, visibleRepos, loading: workspaceLoading} = React.useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = React.useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = React.useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(data).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = React.useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: runningState.size\n          ? sensors.filter(({sensorState}) => runningState.has(sensorState.status))\n          : sensors,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = React.useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = React.useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = React.useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = React.useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = React.useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = React.useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.Gray600}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = (workspaceLoading && !repoCount) || (loading && !data);\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={<Heading>Overview</Heading>}\n        tabs={<OverviewTabs tab=\"sensors\" refreshState={refreshState} />}\n      />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          {data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates' ? (\n            <UnloadableSensorsAlert\n              count={data.unloadableInstigationStatesOrError.results.length}\n            />\n          ) : null}\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst UnloadableSensorsAlert: React.FC<{\n  count: number;\n}> = ({count}) => {\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  if (!count) {\n    return null;\n  }\n\n  const title = count === 1 ? '1 unloadable sensor' : `${count} unloadable sensors`;\n\n  return (\n    <>\n      <Box padding={{vertical: 16, horizontal: 24}} border=\"top\">\n        <Alert\n          intent=\"warning\"\n          title={title}\n          description={\n            <Box flex={{direction: 'column', gap: 12, alignItems: 'flex-start'}}>\n              <div>\n                Sensors were previously started but now cannot be loaded. They may be part of a code\n                location that no longer exists. You can turn them off, but you cannot turn them back\n                on.\n              </div>\n              <Button onClick={() => setIsOpen(true)}>\n                {count === 1 ? 'View unloadable sensor' : 'View unloadable sensors'}\n              </Button>\n            </Box>\n          }\n        />\n      </Box>\n      <Dialog\n        isOpen={isOpen}\n        title=\"Unloadable schedules\"\n        style={{width: '90vw', maxWidth: '1200px'}}\n      >\n        <Box padding={{bottom: 8}}>\n          <UnloadableSensorDialog />\n        </Box>\n        <DialogFooter>\n          <Button intent=\"primary\" onClick={() => setIsOpen(false)}>\n            Done\n          </Button>\n        </DialogFooter>\n      </Dialog>\n    </>\n  );\n};\n\nconst UnloadableSensorDialog: React.FC = () => {\n  const {data} = useQuery<UnloadableSensorsQuery, UnloadableSensorsQueryVariables>(\n    UNLOADABLE_SENSORS_QUERY,\n  );\n  if (!data) {\n    return <Spinner purpose=\"section\" />;\n  }\n\n  if (data?.unloadableInstigationStatesOrError.__typename === 'InstigationStates') {\n    return (\n      <UnloadableSensors\n        sensorStates={data.unloadableInstigationStatesOrError.results}\n        showSubheading={false}\n      />\n    );\n  }\n\n  return <PythonErrorInfo error={data?.unloadableInstigationStatesOrError} />;\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  sensors: {name: string; sensorState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (data?: OverviewSensorsQuery): RepoBucket[] => {\n  if (data?.workspaceOrError.__typename !== 'Workspace') {\n    return [];\n  }\n\n  const entries = data.workspaceOrError.locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n        }\n      }\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nconst UNLOADABLE_SENSORS_QUERY = gql`\n  query UnloadableSensorsQuery {\n    unloadableInstigationStatesOrError(instigationType: SENSOR) {\n      ... on InstigationStates {\n        results {\n          id\n          ...InstigationStateFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as React from 'react';\nimport {Redirect, Route, Switch} from 'react-router-dom';\n\nimport {InstanceBackfills} from '../instance/InstanceBackfills';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\n\nexport const OverviewRoot = () => {\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\">\n        <OverviewActivityRoot />\n      </Route>\n      <Route path=\"/overview/jobs\">\n        <OverviewJobsRoot />\n      </Route>\n      <Route path=\"/overview/schedules\">\n        <OverviewSchedulesRoot />\n      </Route>\n      <Route path=\"/overview/sensors\">\n        <OverviewSensorsRoot />\n      </Route>\n      <Route path=\"/overview/backfills/:backfillId\">\n        <BackfillPage />\n      </Route>\n      <Route path=\"/overview/backfills\" exact>\n        <InstanceBackfills />\n      </Route>\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","import {gql, useQuery} from '@apollo/client';\nimport {Colors, JoinedButtons, TokenizingFieldValue} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport * as React from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = React.useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  ${(props) =>\n    props.$active &&\n    `\n    background: ${Colors.Gray200};\n  `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n"],"names":["OverviewTabs","props","refreshState","tab","jsx_runtime","jsxs","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","jsx","TabLink","id","title","to","padding","bottom","QueryRefreshCountdown","InstanceBackfills","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_FOR_BACKFILLS_QUERY","useCursorPaginatedQuery","query","BACKFILLS_QUERY","variables","pageSize","nextCursorForResult","result","partitionBackfillsOrError","__typename","results","PAGE_SIZE","undefined","getResultArray","queryResult","paginationProps","useQueryRefreshAtInterval","FIFTEEN_SECONDS","Page","PageHeader","Heading","tabs","Loading","allowStaleData","param","PythonErrorInfo","error","length","vertical","NonIdealState","icon","description","p","backfillHealths","daemonHealths","data","instance","daemonHealth","allDaemonStatuses","filter","daemon","daemonType","map","required","healthy","isBackfillHealthy","every","x","div","horizontal","DaemonNotRunningAlertBody","BackfillTable","backfills","slice","refetch","style","marginTop","CursorPaginationControls","gql","INSTANCE_HEALTH_FRAGMENT","PYTHON_ERROR_FRAGMENT","BACKFILL_TABLE_FRAGMENT","dayjs","duration","relativeTime","BackfillPage","backfillId","useParams","concat","BACKFILL_DETAILS_QUERY","backfill","partitionBackfillOrError","isInProgress","BulkActionStatus","REQUESTED","CANCELING","includes","status","Link","color","Colors","Gray700","right","gap","BackfillActionsMenu","canCancelRuns","content","data-testid","testId","Spinner","purpose","message","getRunsUrl","filters","token","value","push","RunStatus","STARTED","QUEUED","STARTING","NOT_STARTED","SUCCESS","FAILURE","CANCELED","runsPathWithFilters","linkQuery","assetBackfillData","rootAssetTargetedRanges","ranges","start","end","default_range","Fragment","wrap","Detail","label","detail","Timestamp","timestamp","ms","Number","timeFormat","showSeconds","showTimezone","Duration","endTimestamp","PartitionSelection","numPartitions","rootAssetTargetedPartitions","BackfillStatusTagForPage","Table","thead","tr","th","width","tbody","assetBackfillStatuses","asset","targeted","inProgress","completed","failed","numPartitionsTargeted","numPartitionsInProgress","numPartitionsMaterialized","numPartitionsFailed","materialized","tokenForAssetKey","assetKey","td","assetDetailsPathForKey","path","join","StatusBar","Tag","intent","minWidth","Label","borderRadius","backgroundColor","Gray100","display","gridTemplateColumns","gridTemplateRows","height","overflow","background","Green500","Red500","Blue200","styled","withConfig","React","s","_","rerender","intervalId","setInterval","clearInterval","Date","now","span","formatDuration","BACKFILL_ACTIONS_BACKFILL_FRAGMENT","COLLATOR","Intl","Collator","navigator","language","sensitivity","numeric","isDialogOpen","setIsDialogOpen","ButtonLink","onClick","numberFormatter","format","Dialog","isOpen","onClose","VirtualizedItemListForDialog","items","_to_consumable_array","sort","a","b","compare","renderItem","TruncatedTextWithFullTextOnHover","text","DialogFooter","topBorder","Button","minutes","Math","floor","hours","days","trim","OverviewAssetsRoot","Header","TabButton","ASSET_CATALOG_TABLE_QUERY","notifyOnNetworkStatusChange","groupedAssetsUnfiltered","assets","groups","assetsOrError","nodes","forEach","definition","groupName","repositoryName","repository","name","key","target","Object","values","useQueryPersistedState","queryKey","decode","qs","searchQuery","JSON","parse","encode","stringify","searchValue","setSearchValue","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","parentRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","getVirtualItems","position","top","zIndex","grow","selected","TextInput","onChange","e","placeholder","loading","Container","ref","VirtualHeaderRow","Inner","$totalHeight","index","size","VirtualRow","TEMPLATE_COLUMNS","border","fontSize","Gray600","White","HeaderCell","assetKeys","liveDataByNode","useAssetsLiveData","statuses","successful","inprogress","missing","keys","assetLiveData","find","console","warn","buildAssetNodeStatusContent","liveData","expanded","case","StatusCase","LOADING","SOURCE_OBSERVING","SOURCE_OBSERVED","SOURCE_NEVER_OBSERVED","SOURCE_NO_STATE","MATERIALIZING","LATE_OR_FAILED","NEVER_MATERIALIZED","MATERIALIZED","PARTITIONS_FAILED","PARTITIONS_MISSING","PARTITIONS_MATERIALIZED","repo","repoAddress","buildRepoAddress","location","useViewport","containerProps","viewport","isBatchStillLoading","Row","$height","$start","RowGrid","Cell","Icon","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","SelectOnHover","getCount","numMissing","adjective","Gray500","numFailed","borderLeft","borderRight","borderBottom","numMaterializing","numMaterialized","children","RowCell","Gray900","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","toLocaleLowerCase","itemRenderer","LinkWithNoUnderline","MenuItem","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","RepoFilterButton","WorkspaceContext","allRepos","visibleRepos","toggleVisible","open","setOpen","canOutsideClickClose","canEscapeKeyClose","DialogHeader","RepoSelector","options","onBrowse","onToggle","rightIcon","useHourWindow","defaultValue","validate","useStateWithStorage","hourWindow","setHourWindow","setHourWindowWithDefault","SCHEDULE_FUTURE_TICKS_FRAGMENT","useRunsForTimeline","range","runsFilter","startSec","endSec","RUN_TIMELINE_QUERY","inProgressFilter","_object_spread_props","_object_spread","createdBefore","terminatedFilter","Array","from","doneStatuses","updatedAfter","tickCursor","ticksUntil","previousData","initialLoading","unterminated","terminated","workspaceOrError","runsByJobKey","run","startTime","repositoryOrigin","overlap","endTime","runJobKey","makeJobKey","repositoryLocationName","pipelineName","jobsWithRuns","jobs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","locationEntries","Symbol","iterator","next","done","_loop","locationEntry","locationOrLoadError","_step1","repositories","pipelines","pipeline","schedules","schedule","jobTicks","scheduleState","InstigationStatus","RUNNING","futureTicks","err","return","isAdHoc","isHiddenAssetGroupJob","jobKey","jobName","jobRuns","jobsAndTicksToAdd","adHocJobs","job","jobType","runs","workspacePipelinePath","repoName","repoLocation","isJob","earliest","reduce","accum","startTimes","_define_property","min","repoAddressAsHumanString","RUN_TIME_FRAGMENT","hourWindowToOffset","OverviewTimelineRoot","setNow","offsetMsec","setOffsetMsec","defaults","search","timer","onPageEarlier","onPageLater","onPageNow","LOOKAHEAD_HOURS","visibleJobKeys","searchLower","flat","flatMap","repositoryLocation","Set","visibleJobs","has","ButtonGroup","activeItems","buttons","hrWindow","ErrorBoundary","region","RunTimeline","OverviewActivityRoot","header","json","defaultTab","setDefaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","render","Redirect","useDelayedState","delayMsec","setValue","setTimeout","clearTimeout","SearchInputSpinner","tooltipContent","margin","Tooltip","placement","canShow","OverviewJobsTable","repos","allKeys","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","expandedKeys","onToggleAll","flattened","type","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","ii","row","VirtualizedJobHeader","RepoRow","showLocation","rightElement","VirtualizedJobRow","sortRepoBuckets","buckets","aString","bString","localeCompare","visibleRepoKeys","option","OverviewJobsRoot","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","repoBuckets","visibleKeys","buildBuckets","sanitizedSearch","anySearch","filteredBySearch","searchToLower","showSearchSpinner","workspaceLoading","paddingTop","anyReposHidden","strong","entries","entry","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_iterator1","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","UnloadableSensors","sensorStates","showSubheading","_param_showSubheading","Subheading","UnloadableSensorInfo","sensorState","SensorStateRow","UnloadableSchedules","scheduleStates","UnloadableScheduleInfo","ScheduleStateRow","Alert","element","selectorId","ticks","hasStopPermission","useMutation","STOP_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","stopSensor","confirm","useConfirmation","onChangeSwitch","_async_to_generator","_state","sent","jobOriginId","jobSelectorId","lacksPermission","latestTick","Checkbox","disabled","toggleOffInFlight","STOPPED","checked","DEFAULT_DISABLED_REASON","Group","spacing","InstigatorSelectorInformation","instigatorState","TickTag","tick","instigationType","InstigationType","SENSOR","Gray300","InstigatedRunStatus","instigationState","STOP_SCHEDULE_MUTATION","displayScheduleMutationErrors","stopSchedule","typeSpecificData","cronSchedule","scheduleOriginId","scheduleSelectorId","humanCronString","SCHEDULE","useCodeLocationFilter","setVisible","setHidden","allRepoAddresses","visibleRepoAddresses","useStaticSetFilter","initialState","allValues","match","getKey","renderLabel","getStringValue","onStateChanged","state","menuWidth","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","scheduleCount","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","showCheckboxColumn","onToggleChecked","OverviewSchedulesRoot","codeLocationFilter","runningStateFilter","useInstigationStatusFilter","useFilters","button","activeFiltersJsx","OVERVIEW_SCHEDULES_QUERY","filteredBuckets","_param","rest","runningState","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","useSelectionReducer","checkedIds","onToggleFactory","permissionedKeysOnScreen","filteredKeys","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","filterButton","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","unloadableInstigationStatesOrError","UnloadableSchedulesAlert","SchedulerInfo","CheckAllBox","totalCount","setIsOpen","UnloadableScheduleDialog","UNLOADABLE_SCHEDULES_QUERY","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTIGATION_STATE_FRAGMENT","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","OverviewSensorsRoot","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","UnloadableSensorsAlert","SensorInfo","UnloadableSensorDialog","UNLOADABLE_SENSORS_QUERY","OverviewRoot","exact","overview_OverviewRoot","getDocumentTitle","useRunListTabs","RUN_TABS_COUNT_QUERY","queuedFilter","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_9__","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_10__","queuedStatuses","inProgressStatuses","countData","queuedCount","inProgressCount","filterTokens","useQueryPersistedRunFilters","selectedTab","useSelectedRunsTab","urlForStatus","tokensMinusStatus","statusTokens","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_12__","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","failedStatuses","AnchorButton","Gray200","pathname","useLocation","isEqual"],"sourceRoot":""}